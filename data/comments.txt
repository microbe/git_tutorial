Guidelines for the better comments
===================================


A properly formed git commit subject line should always be able to complete the following sentence.
    - If applied, this commit will <your subject line here>


Rules for a great git commit message style
    - Separate subject from body with a blank line
    - Do not end the subject line with a period
    - Capitalize the subject line and each paragraph
    - Use the imperative mood in the subject line
    - Wrap lines at 72 characters
    - Use the body to explain what and why you have done something. 
        In most cases, you can leave out details about how a change has 
        been made.


Information in commit messages
    - Describe why a change is being made.
    - How does it address the issue?
    - What effects does the patch have?
    - Do not assume the reviewer understands what the original problem was.
    - Do not assume the code is self-evident/self-documenting.
    - Read the commit message to see if it hints at improved code structure.
    - The first commit line is the most important.
    - Describe any limitations of the current code.
    - Do not include patch set-specific comments.

Type examples
    Production code changes
        - feat: features
        - fix: bug fix
        - refactor: renaming a variable, indentation (Python)
    No production code changes
        - style: formatting, indentation
        - test: adding testing codes
        - docs: changes to the documentation
